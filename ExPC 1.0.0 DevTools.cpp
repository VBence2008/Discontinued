#include <iostream>
#include <fstream>
#include <Windows.h>
#include <string>
int main()
{
    std::string devtools_version = "1.0.0";
    std::string expc_version = "1.0.0";
    SetConsoleTitle(TEXT("ExPC Development Tools - Veress Bence Gyula - 2022"));
    system("DEL ExPC_DevTools\\*.* /Q");
    system("RD ExPC_DevTools /Q");
    system("MD ExPC_DevTools");
    std::cout << "Development Tools for ExPC " + expc_version + " by Veress Bence Gyula - 2022\nType 'help' for a list of available commands and their usage!\nPlease avoid using the SPACE character!\n";
    while (1)
    {
    start:
        std::cout << "\n>";
        std::string command;
        std::cin >> command;
        if (command == "gen")
        {
            std::string gen_language;
            std::cout << "\nSelect the target:\n\n1 - ExPC (ExLang)\n2 - ExOS (ExLang++)\n3 - ExNet (ExLangX)\n\nChoice: ";
            std::cin >> gen_language;
            if (gen_language == "1")
            {
                std::string gen_name;
                std::cout << "\nName: ";
                std::cin >> gen_name;
                std::string gen_author;
                std::cout << "Author: ";
                std::cin >> gen_author;
                std::string gen_version;
                std::cout << "Version: ";
                std::cin >> gen_version;
                std::cout << "\nGenerating code...\n";
                std::string gen_path = ".\\ExPC_DevTools\\" + gen_name + ".exl";
                std::ofstream gen_package(gen_path);
                std::string gen_text = "This file is generated by ExPC Development Tools (DevTools " + devtools_version + ") targeting ExPC " + expc_version + "\n\n</ex>\n    </fun(\"Main\",exl::main)>\n        </obj(\"Config\",exl::config)>\n            </\"name\"(\"" + gen_name + "\",exl::config::name)/>\n            </\"author\"(\"" + gen_author + "\",exl::config::author)/>\n            </\"version\"(\"" + gen_version + "\",exl::config::version)/>\n        <obj/>\n    <fun/>\n<ex/>";
                gen_package << gen_text;
                gen_package.close();
                std::cout << "\nCode generated!\nPath: " + gen_path;
                goto start;
            }
            else if (gen_language == "2")
            {
            }
            else if (gen_language == "3")
            {
            }
            else
            {
                std::cout << "\nInvalid choice!";
                goto start;
            }
        }
        else if (command == "help")
        {
            std::cout << "\nCommands and their usage:\n\ngen -Generate basic code to start the right way\nhelp - List of available commands and their usage, some information\npack - Wizard to make an installer for your product\n\nExPC DevTools " + devtools_version + "\nDiscord: https://discord.gg/y628cyE3d9\n";
        }
        else if (command == "pack")
        {
            std::string pack_input;
            std::cout << "File path: ";
            std::cin >> pack_input;
            std::ifstream packf;
            packf.open(pack_input);
            if (!packf)
            {
                std::cout << "\nAn error occourred while opening the file!";
                goto start;
            }
            std::string package_text;
            std::string target;
            std::cout << "\nSelect the target:\n\n1 - ExPC (ExLang)\n2 - ExOS (ExLang++)\n\nChoice: ";
            std::cin >> target;
            if (target == "1")
            {
                std::cout << "\nCreating package...";
                std::string appdata = getenv("APPDATA");
                package_text = "::This file is generated by ExPC Development Tools (DevTools " + devtools_version + ") targeting ExPC " + expc_version + "\n::It includes the product's installer.\n::It is not advised to touch anything!\n@echo off\ncls\necho Installing package...\nDEL \"" + appdata + "\\EX\\ExPC\\1.0.0\\*.*\" /Q\nDEL \"" + appdata + "\\EX\\ExPC\\*.*\" /Q\nDEL \"" + appdata + "\\EX\\*.*\" /Q\nRD \"" + appdata + "\\EX\\ExPC\\1.0.0\" /Q\nRD \"" + appdata + "\\EX\\ExPC\" /Q\nRD \"" + appdata + "\\EX\" /Q\nMD \"" + appdata + "\\EX\\ExPC\\1.0.0\\\"\necho. > \"" + appdata + "\\EX\\ExPC\\1.0.0\\CONFIG\"\n";
                std::string package_line;
                while (std::getline(packf, package_line))
                {
                    if ((package_line.find("<") != std::string::npos) && (package_line.find("/") != std::string::npos) && (package_line.find(">") != std::string::npos))
                    {
                        while (package_line[0] != '<')
                        {
                            package_line.erase(0, 1);
                        }
                        if (package_line.find("null") != std::string::npos)
                        {
                            size_t text_pos = package_line.find("null");
                            package_line.replace(text_pos,4,"000");
                        }
                        if (package_line.find(">") != std::string::npos)
                        {
                            size_t text_pos = package_line.find(">");
                            package_line.replace(text_pos,1,"010");
                        }
                        if (package_line.find("<") != std::string::npos)
                        {
                            size_t text_pos = package_line.find("<");
                            package_line.replace(text_pos,1,"011");
                        }
                        std::cout << std::endl << package_text << std::endl;
                        package_text += "echo ^" + package_line + "^ >> \"" + appdata + "\\EX\\ExPC\\1.0.0\\CONFIG\"\n";
                    }
                }
                package_text += "echo Package installed!\npause\n";
                std::string package_path = ".\\ExPC_DevTools\\package.bat";
                std::ofstream package_file(package_path);
                package_file << package_text;
                package_file.close();
                std::cout << "\nPackage is ready!\nPath: " + package_path;
                goto start;
            }
            else if (target == "2")
            {
            }
            else
            {
                std::cout << "Invalid target!";
                goto start;
            }
        }
        else
        {
            std::cout << "\nInvalid command!";
        }
    }
}